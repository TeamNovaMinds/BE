name: Deploy to EC2

on:
  push:
    branches:
      - release

jobs:
  JustFridgeDeploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 21 설치
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: .env 파일 생성
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: ECR에 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t just-fridge-server .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag just-fridge-server ${{ steps.login-ecr.outputs.registry }}/just-fridge-server:latest

      - name: ECR에 Docker 이미지 푸시
        run: docker push ${{ steps.login-ecr.outputs.registry }}/just-fridge-server:latest

      - name: EC2 배포 디렉토리 정리 및 권한 설정
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            echo "🧹 배포 디렉토리 전체를 정리하고 권한을 설정합니다..."
            # 1. sudo를 사용해 이전 폴더를 확실히 삭제합니다.
            sudo rm -rf ~/deployment
            # 2. 배포 폴더를 새로 만듭니다.
            mkdir -p ~/deployment
            # 3. 새로 만든 폴더의 소유자를 ubuntu 유저로 변경합니다.
            sudo chown -R ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} ~/deployment
            echo "✅ 정리 및 권한 설정 완료!"

      - name: EC2에 배포 파일들 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "compose.yml,nginx/,scripts/,.env"
          target: "~/deployment/"
          strip_components: 0

      - name: EC2에 배포 및 SSL 설정
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            cd ~/deployment

            echo "🚀 Just Fridge 배포 및 SSL 설정 시작..."

            # 1. 기존 컨테이너 정리 및 이미지 정리
            echo "📦 기존 컨테이너 및 불필요한 이미지 정리 중..."
            docker compose down --remove-orphans || true
            docker image prune -f || true

            # 2. 최신 이미지 Pull
            echo "🔄 최신 이미지 다운로드 중..."
            docker compose pull app || {
              echo "❌ 이미지 pull 실패, ECR 로그인 재시도..."
              aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 600627338836.dkr.ecr.ap-northeast-2.amazonaws.com
              docker compose pull app
            }
            
            # 3. SSL 인증서 발급/갱신 (가장 먼저 실행!)
            # 이 스크립트가 내부적으로 Nginx를 임시 HTTP 모드로 실행하고 인증서를 받아옵니다.
            echo "🔐 SSL 인증서 확인 및 발급/갱신을 시작합니다..."
            chmod +x scripts/init-ssl.sh
            ./scripts/init-ssl.sh

            # 4. 모든 서비스 최종 시작
            # init-ssl.sh가 Nginx를 최종 HTTPS 설정으로 재시작했으므로,
            # 모든 서비스를 최신 상태로 다시 한번 올립니다.
            echo "🏗️ 모든 서비스를 최종적으로 시작/재시작합니다..."
            docker compose up -d --remove-orphans

            # 5. 서비스 안정화 대기 및 상태 확인
            echo "⏳ 서비스 안정화 대기 (20초)..."
            sleep 20

            echo "🔍 최종 서비스 상태를 확인합니다..."
            docker compose ps

            # 6. Nginx 설정 및 로그 최종 확인
            echo "🧪 Nginx 설정 파일의 유효성을 최종 검증합니다..."
            docker compose exec nginx nginx -t
            echo "🔍 Nginx의 최근 로그 50줄을 확인합니다..."
            docker compose logs --tail=50 nginx

            echo "✅ 배포 및 SSL 설정이 성공적으로 완료되었습니다!"